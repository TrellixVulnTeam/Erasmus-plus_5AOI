{
  "version": 3,
  "sources": ["../realm-web/dist/bundle.dom.es.js"],
  "sourcesContent": ["import { EJSON, ObjectId } from 'bson';\nimport * as bson from 'bson';\nexport { bson as BSON };\n\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar BrowserInfo = /** @class */ (function () {\n    function BrowserInfo(name, version, os) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.type = 'browser';\n    }\n    return BrowserInfo;\n}());\nvar NodeInfo = /** @class */ (function () {\n    function NodeInfo(version) {\n        this.version = version;\n        this.type = 'node';\n        this.name = 'node';\n        this.os = process.platform;\n    }\n    return NodeInfo;\n}());\nvar SearchBotDeviceInfo = /** @class */ (function () {\n    function SearchBotDeviceInfo(name, version, os, bot) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.bot = bot;\n        this.type = 'bot-device';\n    }\n    return SearchBotDeviceInfo;\n}());\nvar BotInfo = /** @class */ (function () {\n    function BotInfo() {\n        this.type = 'bot';\n        this.bot = true; // NOTE: deprecated test name instead\n        this.name = 'bot';\n        this.version = null;\n        this.os = null;\n    }\n    return BotInfo;\n}());\nvar ReactNativeInfo = /** @class */ (function () {\n    function ReactNativeInfo() {\n        this.type = 'react-native';\n        this.name = 'react-native';\n        this.version = null;\n        this.os = null;\n    }\n    return ReactNativeInfo;\n}());\n// tslint:disable-next-line:max-line-length\nvar SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;\nvar SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\\ Jeeves\\/Teoma|ia_archiver)/;\nvar REQUIRED_VERSION_PARTS = 3;\nvar userAgentRules = [\n    ['aol', /AOLShield\\/([0-9\\._]+)/],\n    ['edge', /Edge\\/([0-9\\._]+)/],\n    ['edge-ios', /EdgiOS\\/([0-9\\._]+)/],\n    ['yandexbrowser', /YaBrowser\\/([0-9\\._]+)/],\n    ['kakaotalk', /KAKAOTALK\\s([0-9\\.]+)/],\n    ['samsung', /SamsungBrowser\\/([0-9\\.]+)/],\n    ['silk', /\\bSilk\\/([0-9._-]+)\\b/],\n    ['miui', /MiuiBrowser\\/([0-9\\.]+)$/],\n    ['beaker', /BeakerBrowser\\/([0-9\\.]+)/],\n    ['edge-chromium', /EdgA?\\/([0-9\\.]+)/],\n    [\n        'chromium-webview',\n        /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/,\n    ],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/],\n    ['phantomjs', /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['crios', /CriOS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9\\.]+)(?:\\s|$)/],\n    ['fxios', /FxiOS\\/([0-9\\.]+)/],\n    ['opera-mini', /Opera Mini.*Version\\/([0-9\\.]+)/],\n    ['opera', /Opera\\/([0-9\\.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9\\.]+)(:?\\s|$)/],\n    ['ie', /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/],\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9\\.]+)/],\n    ['android', /Android\\s([0-9\\.]+)/],\n    ['ios', /Version\\/([0-9\\._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9\\._]+).*Safari/],\n    ['facebook', /FB[AS]V\\/([0-9\\.]+)/],\n    ['instagram', /Instagram\\s([0-9\\.]+)/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Mobile/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/],\n    ['curl', /^curl\\/([0-9\\.]+)$/],\n    ['searchbot', SEARCHBOX_UA_REGEX],\n];\nvar operatingSystemRules = [\n    ['iOS', /iP(hone|od|ad)/],\n    ['Android OS', /Android/],\n    ['BlackBerry OS', /BlackBerry|BB10/],\n    ['Windows Mobile', /IEMobile/],\n    ['Amazon OS', /Kindle/],\n    ['Windows 3.11', /Win16/],\n    ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],\n    ['Windows 98', /(Windows 98)|(Win98)/],\n    ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],\n    ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],\n    ['Windows Server 2003', /(Windows NT 5.2)/],\n    ['Windows Vista', /(Windows NT 6.0)/],\n    ['Windows 7', /(Windows NT 6.1)/],\n    ['Windows 8', /(Windows NT 6.2)/],\n    ['Windows 8.1', /(Windows NT 6.3)/],\n    ['Windows 10', /(Windows NT 10.0)/],\n    ['Windows ME', /Windows ME/],\n    ['Open BSD', /OpenBSD/],\n    ['Sun OS', /SunOS/],\n    ['Chrome OS', /CrOS/],\n    ['Linux', /(Linux)|(X11)/],\n    ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],\n    ['QNX', /QNX/],\n    ['BeOS', /BeOS/],\n    ['OS/2', /OS\\/2/],\n];\nfunction detect(userAgent) {\n    if (!!userAgent) {\n        return parseUserAgent(userAgent);\n    }\n    if (typeof document === 'undefined' &&\n        typeof navigator !== 'undefined' &&\n        navigator.product === 'ReactNative') {\n        return new ReactNativeInfo();\n    }\n    if (typeof navigator !== 'undefined') {\n        return parseUserAgent(navigator.userAgent);\n    }\n    return getNodeVersion();\n}\nfunction matchUserAgent(ua) {\n    // opted for using reduce here rather than Array#first with a regex.test call\n    // this is primarily because using the reduce we only perform the regex\n    // execution once rather than once for the test and for the exec again below\n    // probably something that needs to be benchmarked though\n    return (ua !== '' &&\n        userAgentRules.reduce(function (matched, _a) {\n            var browser = _a[0], regex = _a[1];\n            if (matched) {\n                return matched;\n            }\n            var uaMatch = regex.exec(ua);\n            return !!uaMatch && [browser, uaMatch];\n        }, false));\n}\nfunction parseUserAgent(ua) {\n    var matchedRule = matchUserAgent(ua);\n    if (!matchedRule) {\n        return null;\n    }\n    var name = matchedRule[0], match = matchedRule[1];\n    if (name === 'searchbot') {\n        return new BotInfo();\n    }\n    // Do not use RegExp for split operation as some browser do not support it (See: http://blog.stevenlevithan.com/archives/cross-browser-split)\n    var versionParts = match[1] && match[1].split('.').join('_').split('_').slice(0, 3);\n    if (versionParts) {\n        if (versionParts.length < REQUIRED_VERSION_PARTS) {\n            versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);\n        }\n    }\n    else {\n        versionParts = [];\n    }\n    var version = versionParts.join('.');\n    var os = detectOS(ua);\n    var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);\n    if (searchBotMatch && searchBotMatch[1]) {\n        return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);\n    }\n    return new BrowserInfo(name, version, os);\n}\nfunction detectOS(ua) {\n    for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {\n        var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];\n        var match = regex.exec(ua);\n        if (match) {\n            return os;\n        }\n    }\n    return null;\n}\nfunction getNodeVersion() {\n    var isNode = typeof process !== 'undefined' && process.version;\n    return isNode ? new NodeInfo(process.version.slice(1)) : null;\n}\nfunction createVersionParts(count) {\n    var output = [];\n    for (var ii = 0; ii < count; ii++) {\n        output.push('0');\n    }\n    return output;\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nclass DefaultNetworkTransport {\n    constructor() {\n        if (!DefaultNetworkTransport.fetch) {\n            throw new Error(\"DefaultNetworkTransport.fetch must be set before it's used\");\n        }\n        if (!DefaultNetworkTransport.AbortController) {\n            throw new Error(\"DefaultNetworkTransport.AbortController must be set before it's used\");\n        }\n    }\n    fetchWithCallbacks(request, handler) {\n        // tslint:disable-next-line: no-console\n        this.fetch(request)\n            .then(async (response) => {\n            const decodedBody = await response.text();\n            // Pull out the headers of the response\n            const responseHeaders = {};\n            response.headers.forEach((value, key) => {\n                responseHeaders[key] = value;\n            });\n            return {\n                statusCode: response.status,\n                headers: responseHeaders,\n                body: decodedBody,\n            };\n        })\n            .then((r) => handler.onSuccess(r))\n            .catch((e) => handler.onError(e));\n    }\n    async fetch(request) {\n        const { timeoutMs, url, ...rest } = request;\n        const { signal, cancelTimeout } = this.createTimeoutSignal(timeoutMs);\n        try {\n            // We'll await the response to catch throw our own error\n            return await DefaultNetworkTransport.fetch(url, {\n                ...DefaultNetworkTransport.extraFetchOptions,\n                signal,\n                ...rest,\n            });\n        }\n        finally {\n            // Whatever happens, cancel any timeout\n            cancelTimeout();\n        }\n    }\n    createTimeoutSignal(timeoutMs) {\n        if (typeof timeoutMs === \"number\") {\n            const controller = new DefaultNetworkTransport.AbortController();\n            // Call abort after a specific number of milliseconds\n            const timeout = setTimeout(() => {\n                controller.abort();\n            }, timeoutMs);\n            return {\n                signal: controller.signal,\n                cancelTimeout: () => {\n                    clearTimeout(timeout);\n                },\n            };\n        }\n        else {\n            return {\n                signal: undefined,\n                cancelTimeout: () => {\n                    /* No-op */\n                },\n            };\n        }\n    }\n}\nDefaultNetworkTransport.DEFAULT_HEADERS = {\n    \"Content-Type\": \"application/json\",\n};\n\n////////////////////////////////////////////////////////////////////////////\nDefaultNetworkTransport.fetch = globalThis.fetch.bind(globalThis);\nDefaultNetworkTransport.AbortController = globalThis.AbortController;\n\n/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.2';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasatob = typeof atob === 'function';\nconst _hasbtoa = typeof btoa === 'function';\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = _hasbtoa ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 \u00A75\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 \u00A75.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = _hasatob ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a), c => c.charCodeAt(0));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins,\n};\n\n////////////////////////////////////////////////////////////////////////////\nconst SERIALIZATION_OPTIONS = {\n    relaxed: false, // Ensure Canonical mode\n};\n/**\n * Serialize an object containing BSON types into extended-JSON.\n *\n * @param obj The object containing BSON types.\n * @returns The document in extended-JSON format.\n */\nfunction serialize(obj) {\n    return EJSON.serialize(obj, SERIALIZATION_OPTIONS);\n}\n/**\n * De-serialize an object or an array of object from extended-JSON into an object or an array of object with BSON types.\n *\n * @param obj The object or array of objects in extended-JSON format.\n * @returns The object or array of objects with inflated BSON types.\n */\nfunction deserialize(obj) {\n    if (Array.isArray(obj)) {\n        return obj.map((doc) => EJSON.deserialize(doc));\n    }\n    else {\n        return EJSON.deserialize(obj);\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * The type of a user.\n */\nvar UserType;\n(function (UserType) {\n    /**\n     * A normal end-user created this user.\n     */\n    UserType[\"Normal\"] = \"normal\";\n    /**\n     * The user was created by the server.\n     */\n    UserType[\"Server\"] = \"server\";\n})(UserType || (UserType = {}));\n/** @ignore */\nvar DataKey;\n(function (DataKey) {\n    /** @ignore */\n    DataKey[\"NAME\"] = \"name\";\n    /** @ignore */\n    DataKey[\"EMAIL\"] = \"email\";\n    /** @ignore */\n    DataKey[\"PICTURE\"] = \"picture\";\n    /** @ignore */\n    DataKey[\"FIRST_NAME\"] = \"first_name\";\n    /** @ignore */\n    DataKey[\"LAST_NAME\"] = \"last_name\";\n    /** @ignore */\n    DataKey[\"GENDER\"] = \"gender\";\n    /** @ignore */\n    DataKey[\"BIRTHDAY\"] = \"birthday\";\n    /** @ignore */\n    DataKey[\"MIN_AGE\"] = \"min_age\";\n    /** @ignore */\n    DataKey[\"MAX_AGE\"] = \"max_age\";\n})(DataKey || (DataKey = {}));\nconst DATA_MAPPING = {\n    [DataKey.NAME]: \"name\",\n    [DataKey.EMAIL]: \"email\",\n    [DataKey.PICTURE]: \"pictureUrl\",\n    [DataKey.FIRST_NAME]: \"firstName\",\n    [DataKey.LAST_NAME]: \"lastName\",\n    [DataKey.GENDER]: \"gender\",\n    [DataKey.BIRTHDAY]: \"birthday\",\n    [DataKey.MIN_AGE]: \"minAge\",\n    [DataKey.MAX_AGE]: \"maxAge\",\n};\n/** @inheritdoc */\nclass UserProfile {\n    /**\n     * @param response The response of a call fetching the users profile.\n     */\n    constructor(response) {\n        /** @ignore */\n        this.type = UserType.Normal;\n        /** @ignore */\n        this.identities = [];\n        if (typeof response === \"object\" && response !== null) {\n            const { type, identities, data } = response;\n            if (typeof type === \"string\") {\n                this.type = type;\n            }\n            else {\n                throw new Error(\"Expected 'type' in the response body\");\n            }\n            if (Array.isArray(identities)) {\n                this.identities = identities.map((identity) => {\n                    const { id, provider_type: providerType } = identity;\n                    return { id, providerType };\n                });\n            }\n            else {\n                throw new Error(\"Expected 'identities' in the response body\");\n            }\n            if (typeof data === \"object\" && data !== null) {\n                const mappedData = Object.fromEntries(Object.entries(data).map(([key, value]) => {\n                    if (key in DATA_MAPPING) {\n                        // Translate any known data field to its JS idiomatic alias\n                        return [DATA_MAPPING[key], value];\n                    }\n                    else {\n                        // Pass through any other values\n                        return [key, value];\n                    }\n                }));\n                // We can use `any` since we trust the user supplies the correct type\n                this.data = deserialize(mappedData);\n            }\n            else {\n                throw new Error(\"Expected 'data' in the response body\");\n            }\n        }\n        else {\n            this.data = {};\n        }\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * A `Storage` which will prefix a key part to every operation.\n */\nclass PrefixedStorage {\n    /**\n     * Construct a `Storage` which will prefix a key part to every operation.\n     *\n     * @param storage The underlying storage to use for operations.\n     * @param keyPart The part of the key to prefix when performing operations.\n     */\n    constructor(storage, keyPart) {\n        this.storage = storage;\n        this.keyPart = keyPart;\n    }\n    /** @inheritdoc */\n    get(key) {\n        return this.storage.get(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);\n    }\n    /** @inheritdoc */\n    set(key, value) {\n        return this.storage.set(this.keyPart + PrefixedStorage.PART_SEPARATOR + key, value);\n    }\n    /** @inheritdoc */\n    remove(key) {\n        return this.storage.remove(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);\n    }\n    /** @inheritdoc */\n    prefix(keyPart) {\n        return new PrefixedStorage(this, keyPart);\n    }\n    /** @inheritdoc */\n    clear(prefix = \"\") {\n        return this.storage.clear(this.keyPart + PrefixedStorage.PART_SEPARATOR + prefix);\n    }\n    /** @inheritdoc */\n    addListener(listener) {\n        return this.storage.addListener(listener);\n    }\n    /** @inheritdoc */\n    removeListener(listener) {\n        return this.storage.addListener(listener);\n    }\n}\n/**\n * The string separating two parts.\n */\nPrefixedStorage.PART_SEPARATOR = \":\";\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * In-memory storage that will not be persisted.\n */\nclass MemoryStorage {\n    constructor() {\n        /**\n         * Internal state of the storage.\n         */\n        this.storage = {};\n        /**\n         * A set of listners.\n         */\n        this.listeners = new Set();\n    }\n    /** @inheritdoc */\n    get(key) {\n        if (key in this.storage) {\n            return this.storage[key];\n        }\n        else {\n            return null;\n        }\n    }\n    /** @inheritdoc */\n    set(key, value) {\n        this.storage[key] = value;\n        // Fire the listeners\n        this.fireListeners();\n    }\n    /** @inheritdoc */\n    remove(key) {\n        delete this.storage[key];\n        // Fire the listeners\n        this.fireListeners();\n    }\n    /** @inheritdoc */\n    prefix(keyPart) {\n        return new PrefixedStorage(this, keyPart);\n    }\n    /** @inheritdoc */\n    clear(prefix) {\n        // Iterate all keys and delete their values if they have a matching prefix\n        for (const key of Object.keys(this.storage)) {\n            if (!prefix || key.startsWith(prefix)) {\n                delete this.storage[key];\n            }\n        }\n        // Fire the listeners\n        this.fireListeners();\n    }\n    /** @inheritdoc */\n    addListener(listener) {\n        this.listeners.add(listener);\n    }\n    /** @inheritdoc */\n    removeListener(listener) {\n        this.listeners.delete(listener);\n    }\n    /**\n     * Tell the listeners that a change occurred.\n     */\n    fireListeners() {\n        this.listeners.forEach((listener) => listener());\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\nconst ACCESS_TOKEN_STORAGE_KEY = \"accessToken\";\nconst REFRESH_TOKEN_STORAGE_KEY = \"refreshToken\";\nconst PROFILE_STORAGE_KEY = \"profile\";\nconst PROVIDER_TYPE_STORAGE_KEY = \"providerType\";\n/**\n * Storage specific to the app.\n */\nclass UserStorage extends PrefixedStorage {\n    /**\n     * Construct a storage for a `User`.\n     *\n     * @param storage The underlying storage to wrap.\n     * @param userId The id of the user.\n     */\n    constructor(storage, userId) {\n        super(storage, `user(${userId})`);\n    }\n    /**\n     * Get the access token from storage.\n     *\n     * @returns Access token (null if unknown).\n     */\n    get accessToken() {\n        return this.get(ACCESS_TOKEN_STORAGE_KEY);\n    }\n    /**\n     * Set the access token in storage.\n     *\n     * @param value Access token (null if unknown).\n     */\n    set accessToken(value) {\n        if (value === null) {\n            this.remove(ACCESS_TOKEN_STORAGE_KEY);\n        }\n        else {\n            this.set(ACCESS_TOKEN_STORAGE_KEY, value);\n        }\n    }\n    /**\n     * Get the refresh token from storage.\n     *\n     * @returns Refresh token (null if unknown and user is logged out).\n     */\n    get refreshToken() {\n        return this.get(REFRESH_TOKEN_STORAGE_KEY);\n    }\n    /**\n     * Set the refresh token in storage.\n     *\n     * @param value Refresh token (null if unknown and user is logged out).\n     */\n    set refreshToken(value) {\n        if (value === null) {\n            this.remove(REFRESH_TOKEN_STORAGE_KEY);\n        }\n        else {\n            this.set(REFRESH_TOKEN_STORAGE_KEY, value);\n        }\n    }\n    /**\n     * Get the user profile from storage.\n     *\n     * @returns User profile (undefined if its unknown).\n     */\n    get profile() {\n        const value = this.get(PROFILE_STORAGE_KEY);\n        if (value) {\n            const profile = new UserProfile();\n            // Patch in the values\n            Object.assign(profile, JSON.parse(value));\n            return profile;\n        }\n    }\n    /**\n     * Set the user profile in storage.\n     *\n     * @param value User profile (undefined if its unknown).\n     */\n    set profile(value) {\n        if (value) {\n            this.set(PROFILE_STORAGE_KEY, JSON.stringify(value));\n        }\n        else {\n            this.remove(PROFILE_STORAGE_KEY);\n        }\n    }\n    /**\n     * Get the type of authentication provider used to authenticate\n     *\n     * @returns User profile (undefined if its unknown).\n     */\n    get providerType() {\n        const value = this.get(PROVIDER_TYPE_STORAGE_KEY);\n        if (value) {\n            return value;\n        }\n    }\n    /**\n     * Set the type of authentication provider used to authenticate\n     *\n     * @param value Type of authentication provider.\n     */\n    set providerType(value) {\n        if (value) {\n            this.set(PROVIDER_TYPE_STORAGE_KEY, value);\n        }\n        else {\n            this.remove(PROVIDER_TYPE_STORAGE_KEY);\n        }\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * @param obj The object to remove keys (and undefined values from)\n * @returns A new object without the keys where the value is undefined.\n */\nfunction removeKeysWithUndefinedValues(obj) {\n    return Object.fromEntries(Object.entries(obj).filter((entry) => typeof entry[1] !== \"undefined\"));\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * Generate a random sequence of characters.\n *\n * @param length The length of the string.\n * @param alphabet The alphabet of characters to pick from.\n * @returns A string of characters picked randomly from `alphabet`.\n */\nfunction generateRandomString(length, alphabet) {\n    let result = \"\";\n    for (let i = 0; i < length; i++) {\n        result += alphabet[Math.floor(Math.random() * alphabet.length)];\n    }\n    return result;\n}\n/**\n * Encode an object mapping from string to string, into a query string to be appended a URL.\n *\n * @param params The parameters to include in the string.\n * @param prefixed Should the \"?\" prefix be added if values exists?\n * @returns A URL encoded representation of the parameters (omitting a \"?\" prefix).\n */\nfunction encodeQueryString(params, prefixed = true) {\n    // Filter out undefined values\n    const cleanedParams = removeKeysWithUndefinedValues(params);\n    // Determine if a prefixed \"?\" is appropreate\n    const prefix = prefixed && Object.keys(cleanedParams).length > 0 ? \"?\" : \"\";\n    // Transform keys and values to a query string\n    return (prefix +\n        Object.entries(cleanedParams)\n            .map(([k, v]) => `${k}=${encodeURIComponent(v)}`)\n            .join(\"&\"));\n}\n/**\n * Decodes a query string into an object.\n *\n * @param str The query string to decode.\n * @returns The decoded query string.\n */\nfunction decodeQueryString(str) {\n    const cleanStr = str[0] === \"?\" ? str.substr(1) : str;\n    return Object.fromEntries(cleanStr\n        .split(\"&\")\n        .filter((s) => s.length > 0)\n        .map((kvp) => kvp.split(\"=\"))\n        .map(([k, v]) => [k, decodeURIComponent(v)]));\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * A list of names that functions cannot have to be callable through the functions proxy.\n */\nconst RESERVED_NAMES = [\n    \"inspect\",\n    \"callFunction\",\n    \"callFunctionStreaming\",\n    // Methods defined on the Object.prototype might be \"typeof probed\" and called by libraries and runtime environments.\n    ...Object.getOwnPropertyNames(Object.prototype),\n];\n/**\n * Remove the key for any fields with undefined values.\n *\n * @param args The arguments to clean.\n * @returns The cleaned arguments.\n */\nfunction cleanArgs(args) {\n    for (const arg of args) {\n        if (typeof arg === \"object\" && arg) {\n            for (const [key, value] of Object.entries(arg)) {\n                if (value === undefined) {\n                    delete arg[key];\n                }\n            }\n        }\n    }\n    return args;\n}\n/**\n * Remove keys for any undefined values and serialize to EJSON.\n *\n * @param args The arguments to clean and serialize.\n * @returns The cleaned and serialized arguments.\n */\nfunction cleanArgsAndSerialize(args) {\n    const cleaned = cleanArgs(args);\n    return cleaned.map((arg) => (typeof arg === \"object\" ? serialize(arg) : arg));\n}\n/**\n * Defines how functions are called.\n */\nclass FunctionsFactory {\n    /**\n     * @param fetcher The underlying fetcher to use when sending requests.\n     * @param config Additional configuration parameters.\n     */\n    constructor(fetcher, config = {}) {\n        this.fetcher = fetcher;\n        this.serviceName = config.serviceName;\n        this.argsTransformation = config.argsTransformation || cleanArgsAndSerialize;\n    }\n    /**\n     * Create a factory of functions, wrapped in a Proxy that returns bound copies of `callFunction` on any property.\n     *\n     * @param fetcher The underlying fetcher to use when requesting.\n     * @param config Additional configuration parameters.\n     * @returns The newly created factory of functions.\n     */\n    static create(fetcher, config = {}) {\n        // Create a proxy, wrapping a simple object returning methods that calls functions\n        // TODO: Lazily fetch available functions and return these from the ownKeys() trap\n        const factory = new FunctionsFactory(fetcher, config);\n        // Wrap the factory in a proxy that calls the internal call method\n        return new Proxy(factory, {\n            get(target, p, receiver) {\n                if (typeof p === \"string\" && RESERVED_NAMES.indexOf(p) === -1) {\n                    return target.callFunction.bind(target, p);\n                }\n                else {\n                    const prop = Reflect.get(target, p, receiver);\n                    return typeof prop === \"function\" ? prop.bind(target) : prop;\n                }\n            },\n        });\n    }\n    /**\n     * Call a remote function by it's name.\n     *\n     * @param name Name of the remote function.\n     * @param args Arguments to pass to the remote function.\n     * @returns A promise of the value returned when executing the remote function.\n     */\n    async callFunction(name, ...args) {\n        // See https://github.com/mongodb/stitch-js-sdk/blob/master/packages/core/sdk/src/services/internal/CoreStitchServiceClientImpl.ts\n        const body = {\n            name,\n            arguments: this.argsTransformation ? this.argsTransformation(args) : args,\n        };\n        if (this.serviceName) {\n            body.service = this.serviceName;\n        }\n        const appRoute = this.fetcher.appRoute;\n        return this.fetcher.fetchJSON({\n            method: \"POST\",\n            path: appRoute.functionsCall().path,\n            body,\n        });\n    }\n    /**\n     * Call a remote function by it's name.\n     *\n     * @param name Name of the remote function.\n     * @param args Arguments to pass to the remote function.\n     * @returns A promise of the value returned when executing the remote function.\n     */\n    callFunctionStreaming(name, ...args) {\n        const body = {\n            name,\n            arguments: this.argsTransformation ? this.argsTransformation(args) : args,\n        };\n        if (this.serviceName) {\n            body.service = this.serviceName;\n        }\n        const appRoute = this.fetcher.appRoute;\n        const qs = encodeQueryString({\n            [\"baas_request\"]: gBase64.encode(JSON.stringify(body)),\n        });\n        return this.fetcher.fetchStream({\n            method: \"GET\",\n            path: appRoute.functionsCall().path + qs,\n        });\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2021 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * Check whether the user's app is running in \"development mode\" (e.g. `npm run dev`\n * for a React app, or `NODE_ENV=development` for a Node app). Each platform's entry\n * point should define the value of this using `setIsDevelopmentMode`.\n * The default behaviour is to always return `false`.\n *\n * @returns true if the user's app is running in development mode, false otherwise\n */\nlet isDevelopmentMode = false;\n/**\n * Set the value of `isDevelopmentMode`. This allows each entry point (node vs DOM)\n * to use its own method for determining whether we are in development mode.\n *\n * @param state A boolean indicating whether the user's app is running in\n * development mode or not.\n */\nconst setIsDevelopmentMode = (state) => {\n    isDevelopmentMode = state;\n};\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * Display a deprecation warning for features being removed in the next major version\n * to users in development mode (as best as we can detect this, see `isDevelopmentMode`)\n *\n * @param deprecatedItem The method signature or name of the deprecated item\n * @param suggestedReplacement The method signature or name of the suggested replacement\n */\nconst deprecationWarning = (deprecatedItem, suggestedReplacement) => {\n    if (!isDevelopmentMode)\n        return;\n    console.warn(`Deprecation warning from Realm: ${deprecatedItem} is deprecated and will be removed in a future major release. Consider switching to ${suggestedReplacement}.`);\n};\n/**\n * Helper function for migrating from positional arguments to a single dictionary argument.\n * Check the arguments passed to a function, if the first argument is not an object (i.e. it\n * is presumed to be a deprecated positional-style call), shows a deprecation warning and\n * converts the positional arguments into an object matching the expected \"new\" shape.\n *\n * @param args Array of arguments passed to the function (captured with `...args`).\n * @param methodName The name of the method, used to show the deprecation warning.\n * @param argNames The list of positional argument names, used to covert them into\n * an object if a deprecated call is made and to show the deprecation warning.\n * @param hasRestArgs Optional flag indicating that the function's final argument is\n * `...args` (to capture any extra arguments), in which case we capture them and return\n * as the second element of the return array.\n *\n * @returns An object containing:\n *\n * argsObject: a dictionary of function arguments, either passed through from args[0] if\n * args[0] is an object, or created from `args` and `argNames` if the args are a\n * deprecated positional argument call.\n *\n * restArgs: an array of the \"...args\" passed to the function if `hasRestArgs` is true;\n * otherwise it is `undefined`.\n */\n// Allow use of `object` type\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst handleDeprecatedPositionalArgs = (args, methodName, argNames, hasRestArgs) => {\n    if (typeof args[0] !== \"object\") {\n        const restArgsText = hasRestArgs ? \", ...args\" : \"\";\n        deprecationWarning(`${methodName}(${argNames.join(\", \")}${restArgsText})`, `${methodName}({ ${argNames.join(\", \")} }${restArgsText})`);\n        // Convert the array of arguments into a dictionary keyed by the relevant argName\n        const argsObject = argNames.reduce((prev, argName, index) => {\n            return { ...prev, [argName]: args[index] };\n        }, {});\n        const restArgs = hasRestArgs ? args.slice(argNames.length) : undefined;\n        return { argsObject, restArgs };\n    }\n    return { argsObject: args[0], restArgs: hasRestArgs ? args.slice(1) : undefined };\n};\n\n////////////////////////////////////////////////////////////////////////////\n// React/React Native set a global __DEV__ variable when running in dev mode\nsetIsDevelopmentMode(typeof __DEV__ !== \"undefined\" && __DEV__);\n\n////////////////////////////////////////////////////////////////////////////\n/** @inheritdoc */\nclass EmailPasswordAuth {\n    /**\n     * Construct an interface to the email / password authentication provider.\n     *\n     * @param fetcher The underlying fetcher used to request the services.\n     * @param providerName Optional custom name of the authentication provider.\n     */\n    constructor(fetcher, providerName = \"local-userpass\") {\n        this.fetcher = fetcher;\n        this.providerName = providerName;\n    }\n    async registerUser(...args) {\n        const { argsObject: userDetails } = handleDeprecatedPositionalArgs(args, \"registerUser\", [\"email\", \"password\"]);\n        const appRoute = this.fetcher.appRoute;\n        await this.fetcher.fetchJSON({\n            method: \"POST\",\n            path: appRoute.emailPasswordAuth(this.providerName).register().path,\n            body: userDetails,\n        });\n    }\n    async confirmUser(...args) {\n        const { argsObject: tokenDetails } = handleDeprecatedPositionalArgs(args, \"confirmUser\", [\"token\", \"tokenId\"]);\n        const appRoute = this.fetcher.appRoute;\n        await this.fetcher.fetchJSON({\n            method: \"POST\",\n            path: appRoute.emailPasswordAuth(this.providerName).confirm().path,\n            body: tokenDetails,\n        });\n    }\n    async resendConfirmationEmail(...args) {\n        const { argsObject: emailDetails } = handleDeprecatedPositionalArgs(args, \"resendConfirmationEmail\", [\"email\"]);\n        const appRoute = this.fetcher.appRoute;\n        await this.fetcher.fetchJSON({\n            method: \"POST\",\n            path: appRoute.emailPasswordAuth(this.providerName).confirmSend().path,\n            body: emailDetails,\n        });\n    }\n    async retryCustomConfirmation(...args) {\n        const { argsObject: emailDetails } = handleDeprecatedPositionalArgs(args, \"retryCustomConfirmation\", [\"email\"]);\n        const appRoute = this.fetcher.appRoute;\n        await this.fetcher.fetchJSON({\n            method: \"POST\",\n            path: appRoute.emailPasswordAuth(this.providerName).confirmCall().path,\n            body: emailDetails,\n        });\n    }\n    async resetPassword(...args) {\n        const { argsObject: resetDetails } = handleDeprecatedPositionalArgs(args, \"resetPassword\", [\"token\", \"tokenId\", \"password\"]);\n        const appRoute = this.fetcher.appRoute;\n        await this.fetcher.fetchJSON({\n            method: \"POST\",\n            path: appRoute.emailPasswordAuth(this.providerName).reset().path,\n            body: resetDetails,\n        });\n    }\n    async sendResetPasswordEmail(...args) {\n        const { argsObject: emailDetails } = handleDeprecatedPositionalArgs(args, \"sendResetPasswordEmail\", [\"email\"]);\n        const appRoute = this.fetcher.appRoute;\n        await this.fetcher.fetchJSON({\n            method: \"POST\",\n            path: appRoute.emailPasswordAuth(this.providerName).resetSend().path,\n            body: emailDetails,\n        });\n    }\n    async callResetPasswordFunction(...args) {\n        const { argsObject: resetDetails, restArgs, } = handleDeprecatedPositionalArgs(args, \"callResetPasswordFunction\", [\"email\", \"password\"], true);\n        const appRoute = this.fetcher.appRoute;\n        await this.fetcher.fetchJSON({\n            method: \"POST\",\n            path: appRoute.emailPasswordAuth(this.providerName).resetCall().path,\n            body: { ...resetDetails, arguments: restArgs },\n        });\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * @returns The base api route.\n */\nfunction api() {\n    return {\n        path: \"/api/client/v2.0\",\n        /**\n         * @param appId The id of the app.\n         * @returns The URL of the app endpoint.\n         */\n        app(appId) {\n            return {\n                path: this.path + `/app/${appId}`,\n                /**\n                 * @returns The URL of the app location endpoint.\n                 */\n                location() {\n                    return {\n                        path: this.path + \"/location\",\n                    };\n                },\n                /**\n                 * @param providerName The name of the provider.\n                 * @returns The app url concatinated with the /auth/providers/{providerName}\n                 */\n                authProvider(providerName) {\n                    return {\n                        path: this.path + `/auth/providers/${providerName}`,\n                        /**\n                         * @returns Get the URL of an authentication provider.\n                         */\n                        login() {\n                            return { path: this.path + \"/login\" };\n                        },\n                    };\n                },\n                /**\n                 * @param providerName The name of the provider.\n                 * @returns The app url concatinated with the /auth/providers/{providerName}\n                 */\n                emailPasswordAuth(providerName) {\n                    const authProviderRoutes = this.authProvider(providerName);\n                    return {\n                        ...authProviderRoutes,\n                        register() {\n                            return { path: this.path + \"/register\" };\n                        },\n                        confirm() {\n                            return { path: this.path + \"/confirm\" };\n                        },\n                        confirmSend() {\n                            return { path: this.path + \"/confirm/send\" };\n                        },\n                        confirmCall() {\n                            return { path: this.path + \"/confirm/call\" };\n                        },\n                        reset() {\n                            return { path: this.path + \"/reset\" };\n                        },\n                        resetSend() {\n                            return { path: this.path + \"/reset/send\" };\n                        },\n                        resetCall() {\n                            return { path: this.path + \"/reset/call\" };\n                        },\n                    };\n                },\n                functionsCall() {\n                    return {\n                        path: this.path + \"/functions/call\",\n                    };\n                },\n            };\n        },\n        auth() {\n            return {\n                path: this.path + \"/auth\",\n                apiKeys() {\n                    return {\n                        path: this.path + \"/api_keys\",\n                        key(id) {\n                            return {\n                                path: this.path + `/${id}`,\n                                enable() {\n                                    return { path: this.path + \"/enable\" };\n                                },\n                                disable() {\n                                    return { path: this.path + \"/disable\" };\n                                },\n                            };\n                        },\n                    };\n                },\n                profile() {\n                    return { path: this.path + \"/profile\" };\n                },\n                session() {\n                    return { path: this.path + \"/session\" };\n                },\n                delete() {\n                    return { path: this.path + \"/delete\" };\n                },\n            };\n        },\n    };\n}\nvar routes = { api };\n\n////////////////////////////////////////////////////////////////////////////\n/** @inheritdoc */\nclass ApiKeyAuth {\n    /**\n     * Construct an interface to the API-key authentication provider.\n     *\n     * @param fetcher The fetcher used to send requests to services.\n     */\n    constructor(fetcher) {\n        this.fetcher = fetcher;\n    }\n    /** @inheritdoc */\n    create(name) {\n        return this.fetcher.fetchJSON({\n            method: \"POST\",\n            body: { name },\n            path: routes.api().auth().apiKeys().path,\n            tokenType: \"refresh\",\n        });\n    }\n    /** @inheritdoc */\n    fetch(keyId) {\n        return this.fetcher.fetchJSON({\n            method: \"GET\",\n            path: routes.api().auth().apiKeys().key(keyId).path,\n            tokenType: \"refresh\",\n        });\n    }\n    /** @inheritdoc */\n    fetchAll() {\n        return this.fetcher.fetchJSON({\n            method: \"GET\",\n            tokenType: \"refresh\",\n            path: routes.api().auth().apiKeys().path,\n        });\n    }\n    /** @inheritdoc */\n    async delete(keyId) {\n        await this.fetcher.fetchJSON({\n            method: \"DELETE\",\n            path: routes.api().auth().apiKeys().key(keyId).path,\n            tokenType: \"refresh\",\n        });\n    }\n    /** @inheritdoc */\n    async enable(keyId) {\n        await this.fetcher.fetchJSON({\n            method: \"PUT\",\n            path: routes.api().auth().apiKeys().key(keyId).enable().path,\n            tokenType: \"refresh\",\n        });\n    }\n    /** @inheritdoc */\n    async disable(keyId) {\n        await this.fetcher.fetchJSON({\n            method: \"PUT\",\n            path: routes.api().auth().apiKeys().key(keyId).disable().path,\n            tokenType: \"refresh\",\n        });\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nlet environment = null;\n/**\n * Set the environment of execution.\n * Note: This should be called as the first thing before executing any code which calls getEnvironment()\n *\n * @param e An object containing environment specific implementations.\n */\nfunction setEnvironment(e) {\n    environment = e;\n}\n/**\n * Get the environment of execution.\n *\n * @returns An object containing environment specific implementations.\n */\nfunction getEnvironment() {\n    if (environment) {\n        return environment;\n    }\n    else {\n        throw new Error(\"Cannot get environment before it's set\");\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * An error occured during the parsing of a watch stream.\n */\nclass WatchError extends Error {\n    constructor({ message, code }) {\n        super(message);\n        /**\n         * The name of this type of error\n         */\n        this.name = \"WatchError\";\n        this.code = code;\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n// NOTE: this is a fully processed event, not a single \"data: foo\" line!\n/**\n * The state of a WatchStream.\n */\nvar WatchStreamState;\n(function (WatchStreamState) {\n    /**\n     * Need to call one of the feed functions.\n     */\n    WatchStreamState[\"NEED_DATA\"] = \"NEED_DATA\";\n    /**\n     * Call nextEvent() to consume an event.\n     */\n    WatchStreamState[\"HAVE_EVENT\"] = \"HAVE_EVENT\";\n    /**\n     * Call error().\n     */\n    WatchStreamState[\"HAVE_ERROR\"] = \"HAVE_ERROR\";\n})(WatchStreamState || (WatchStreamState = {}));\n/**\n * Represents a stream of events\n */\nclass WatchStream {\n    constructor() {\n        this._state = WatchStreamState.NEED_DATA;\n        this._error = null;\n        // Used by feedBuffer to construct lines\n        this._textDecoder = new (getEnvironment().TextDecoder)();\n        this._buffer = \"\";\n        this._bufferOffset = 0;\n        // Used by feedLine for building the next SSE\n        this._eventType = \"\";\n        this._dataBuffer = \"\";\n    }\n    // Call these when you have data, in whatever shape is easiest for your SDK to get.\n    // Pick one, mixing and matching on a single instance isn't supported.\n    // These can only be called in NEED_DATA state, which is the initial state.\n    feedBuffer(buffer) {\n        this.assertState(WatchStreamState.NEED_DATA);\n        this._buffer += this._textDecoder.decode(buffer, { stream: true });\n        this.advanceBufferState();\n    }\n    feedLine(line) {\n        this.assertState(WatchStreamState.NEED_DATA);\n        // This is an implementation of the algorithm described at\n        // https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation.\n        // Currently the server does not use id or retry lines, so that processing isn't implemented.\n        // ignore trailing LF if not removed by SDK.\n        if (line.endsWith(\"\\n\"))\n            line = line.substr(0, line.length - 1);\n        // ignore trailing CR from CRLF\n        if (line.endsWith(\"\\r\"))\n            line = line.substr(0, line.length - 1);\n        if (line.length === 0) {\n            // This is the \"dispatch the event\" portion of the algorithm.\n            if (this._dataBuffer.length === 0) {\n                this._eventType = \"\";\n                return;\n            }\n            if (this._dataBuffer.endsWith(\"\\n\"))\n                this._dataBuffer = this._dataBuffer.substr(0, this._dataBuffer.length - 1);\n            this.feedSse({\n                data: this._dataBuffer,\n                eventType: this._eventType,\n            });\n            this._dataBuffer = \"\";\n            this._eventType = \"\";\n        }\n        if (line[0] === \":\")\n            return;\n        const colon = line.indexOf(\":\");\n        const field = line.substr(0, colon);\n        let value = colon === -1 ? \"\" : line.substr(colon + 1);\n        if (value.startsWith(\" \"))\n            value = value.substr(1);\n        if (field === \"event\") {\n            this._eventType = value;\n        }\n        else if (field === \"data\") {\n            this._dataBuffer += value;\n            this._dataBuffer += \"\\n\";\n        }\n        else ;\n    }\n    feedSse(sse) {\n        this.assertState(WatchStreamState.NEED_DATA);\n        const firstPercentIndex = sse.data.indexOf(\"%\");\n        if (firstPercentIndex !== -1) {\n            // For some reason, the stich server decided to add percent-encoding for '%', '\\n', and '\\r' to its\n            // event-stream replies. But it isn't real urlencoding, since most characters pass through, so we can't use\n            // uri_percent_decode() here.\n            let buffer = \"\";\n            let start = 0;\n            for (let percentIndex = firstPercentIndex; percentIndex !== -1; percentIndex = sse.data.indexOf(\"%\", start)) {\n                buffer += sse.data.substr(start, percentIndex - start);\n                const encoded = sse.data.substr(percentIndex, 3); // may be smaller than 3 if string ends with %\n                if (encoded === \"%25\") {\n                    buffer += \"%\";\n                }\n                else if (encoded === \"%0A\") {\n                    buffer += \"\\x0A\"; // '\\n'\n                }\n                else if (encoded === \"%0D\") {\n                    buffer += \"\\x0D\"; // '\\r'\n                }\n                else {\n                    buffer += encoded; // propagate as-is\n                }\n                start = percentIndex + encoded.length;\n            }\n            // Advance the buffer with the last part\n            buffer += sse.data.substr(start);\n            sse.data = buffer;\n        }\n        if (!sse.eventType || sse.eventType === \"message\") {\n            try {\n                const parsed = EJSON.parse(sse.data);\n                if (typeof parsed === \"object\") {\n                    // ???\n                    this._nextEvent = parsed;\n                    this._state = WatchStreamState.HAVE_EVENT;\n                    return;\n                }\n            }\n            catch {\n                // fallthrough to same handling as for non-document value.\n            }\n            this._state = WatchStreamState.HAVE_ERROR;\n            this._error = new WatchError({\n                message: \"server returned malformed event: \" + sse.data,\n                code: \"bad bson parse\",\n            });\n        }\n        else if (sse.eventType === \"error\") {\n            this._state = WatchStreamState.HAVE_ERROR;\n            // default error message if we have issues parsing the reply.\n            this._error = new WatchError({\n                message: sse.data,\n                code: \"unknown\",\n            });\n            try {\n                const { error_code: errorCode, error } = EJSON.parse(sse.data);\n                if (typeof errorCode !== \"string\")\n                    return;\n                if (typeof error !== \"string\")\n                    return;\n                // XXX in realm-js, object-store will error if the error_code is not one of the known\n                // error code enum values.\n                this._error = new WatchError({\n                    message: error,\n                    code: errorCode,\n                });\n            }\n            catch {\n                return; // Use the default state.\n            }\n        }\n        else ;\n    }\n    get state() {\n        return this._state;\n    }\n    // Consumes the returned event. If you used feedBuffer(), there may be another event or error after this one,\n    // so you need to call state() again to see what to do next.\n    nextEvent() {\n        this.assertState(WatchStreamState.HAVE_EVENT);\n        // We can use \"as ChangeEvent<T>\" since we just asserted the state.\n        const out = this._nextEvent;\n        this._state = WatchStreamState.NEED_DATA;\n        this.advanceBufferState();\n        return out;\n    }\n    // Once this enters the error state, it stays that way. You should not feed any more data.\n    get error() {\n        return this._error;\n    }\n    ////////////////////////////////////////////\n    advanceBufferState() {\n        this.assertState(WatchStreamState.NEED_DATA);\n        while (this.state === WatchStreamState.NEED_DATA) {\n            if (this._bufferOffset === this._buffer.length) {\n                this._buffer = \"\";\n                this._bufferOffset = 0;\n                return;\n            }\n            // NOTE not supporting CR-only newlines, just LF and CRLF.\n            const nextNewlineIndex = this._buffer.indexOf(\"\\n\", this._bufferOffset);\n            if (nextNewlineIndex === -1) {\n                // We have a partial line.\n                if (this._bufferOffset !== 0) {\n                    // Slide the partial line down to the front of the buffer.\n                    this._buffer = this._buffer.substr(this._bufferOffset, this._buffer.length - this._bufferOffset);\n                    this._bufferOffset = 0;\n                }\n                return;\n            }\n            this.feedLine(this._buffer.substr(this._bufferOffset, nextNewlineIndex - this._bufferOffset));\n            this._bufferOffset = nextNewlineIndex + 1; // Advance past this line, including its newline.\n        }\n    }\n    assertState(state) {\n        if (this._state !== state) {\n            throw Error(`Expected WatchStream to be in state ${state}, but in state ${this._state}`);\n        }\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * A remote collection of documents.\n */\nclass MongoDBCollection {\n    /**\n     * Construct a remote collection of documents.\n     *\n     * @param fetcher The fetcher to use when requesting the service.\n     * @param serviceName The name of the remote service.\n     * @param databaseName The name of the database.\n     * @param collectionName The name of the remote collection.\n     */\n    constructor(fetcher, serviceName, databaseName, collectionName) {\n        this.functions = FunctionsFactory.create(fetcher, {\n            serviceName,\n        });\n        this.databaseName = databaseName;\n        this.collectionName = collectionName;\n        this.serviceName = serviceName;\n        this.fetcher = fetcher;\n    }\n    /** @inheritdoc */\n    find(filter = {}, options = {}) {\n        return this.functions.find({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n            project: options.projection,\n            sort: options.sort,\n            limit: options.limit,\n        });\n    }\n    /** @inheritdoc */\n    findOne(filter = {}, options = {}) {\n        return this.functions.findOne({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n            project: options.projection,\n            sort: options.sort,\n        });\n    }\n    /** @inheritdoc */\n    findOneAndUpdate(filter = {}, update, options = {}) {\n        return this.functions.findOneAndUpdate({\n            database: this.databaseName,\n            collection: this.collectionName,\n            filter,\n            update,\n            sort: options.sort,\n            projection: options.projection,\n            upsert: options.upsert,\n            returnNewDocument: options.returnNewDocument,\n        });\n    }\n    /** @inheritdoc */\n    findOneAndReplace(filter = {}, replacement, options = {}) {\n        return this.functions.findOneAndReplace({\n            database: this.databaseName,\n            collection: this.collectionName,\n            filter: filter,\n            update: replacement,\n            sort: options.sort,\n            projection: options.projection,\n            upsert: options.upsert,\n            returnNewDocument: options.returnNewDocument,\n        });\n    }\n    /** @inheritdoc */\n    findOneAndDelete(filter = {}, options = {}) {\n        return this.functions.findOneAndReplace({\n            database: this.databaseName,\n            collection: this.collectionName,\n            filter,\n            sort: options.sort,\n            projection: options.projection,\n        });\n    }\n    /** @inheritdoc */\n    aggregate(pipeline) {\n        return this.functions.aggregate({\n            database: this.databaseName,\n            collection: this.collectionName,\n            pipeline,\n        });\n    }\n    /** @inheritdoc */\n    count(filter = {}, options = {}) {\n        return this.functions.count({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n            limit: options.limit,\n        });\n    }\n    /** @inheritdoc */\n    insertOne(document) {\n        return this.functions.insertOne({\n            database: this.databaseName,\n            collection: this.collectionName,\n            document,\n        });\n    }\n    /** @inheritdoc */\n    insertMany(documents) {\n        return this.functions.insertMany({\n            database: this.databaseName,\n            collection: this.collectionName,\n            documents,\n        });\n    }\n    /** @inheritdoc */\n    deleteOne(filter = {}) {\n        return this.functions.deleteOne({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n        });\n    }\n    /** @inheritdoc */\n    deleteMany(filter = {}) {\n        return this.functions.deleteMany({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n        });\n    }\n    /** @inheritdoc */\n    updateOne(filter, update, options = {}) {\n        return this.functions.updateOne({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n            update,\n            upsert: options.upsert,\n            arrayFilters: options.arrayFilters,\n        });\n    }\n    /** @inheritdoc */\n    updateMany(filter, update, options = {}) {\n        return this.functions.updateMany({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n            update,\n            upsert: options.upsert,\n            arrayFilters: options.arrayFilters,\n        });\n    }\n    async *watch({ ids, filter, } = {}) {\n        const iterator = await this.functions.callFunctionStreaming(\"watch\", {\n            database: this.databaseName,\n            collection: this.collectionName,\n            ids,\n            filter,\n        });\n        const watchStream = new WatchStream();\n        for await (const chunk of iterator) {\n            if (!chunk)\n                continue;\n            watchStream.feedBuffer(chunk);\n            while (watchStream.state == WatchStreamState.HAVE_EVENT) {\n                yield watchStream.nextEvent();\n            }\n            if (watchStream.state == WatchStreamState.HAVE_ERROR)\n                // XXX this is just throwing an error like {error_code: \"BadRequest, error: \"message\"},\n                // which matches realm-js, but is different from how errors are handled in realm-web\n                throw watchStream.error;\n        }\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * Creates an Remote MongoDB Collection.\n * Note: This method exists to enable function binding.\n *\n * @param fetcher The underlying fetcher.\n * @param serviceName A service name.\n * @param databaseName A database name.\n * @param collectionName A collection name.\n * @returns The collection.\n */\nfunction createCollection(fetcher, serviceName, databaseName, collectionName) {\n    return new MongoDBCollection(fetcher, serviceName, databaseName, collectionName);\n}\n/**\n * Creates a Remote MongoDB Database.\n * Note: This method exists to enable function binding.\n *\n * @param fetcher The underlying fetcher\n * @param serviceName A service name\n * @param databaseName A database name\n * @returns The database.\n */\nfunction createDatabase(fetcher, serviceName, databaseName) {\n    return {\n        collection: createCollection.bind(null, fetcher, serviceName, databaseName),\n    };\n}\n/**\n * Creates a Remote MongoDB Service.\n * Note: This method exists to enable function binding.\n *\n * @param fetcher The underlying fetcher.\n * @param serviceName An optional service name.\n * @returns The service.\n */\nfunction createService(fetcher, serviceName = \"mongo-db\") {\n    return { db: createDatabase.bind(null, fetcher, serviceName) };\n}\n\n////////////////////////////////////////////////////////////////////////////\nconst DEFAULT_DEVICE_ID = \"000000000000000000000000\";\n/** The state of a user within the app */\nvar UserState;\n(function (UserState) {\n    /** Active, with both access and refresh tokens */\n    UserState[\"Active\"] = \"active\";\n    /** Logged out, but there might still be data persisted about the user, in the browser. */\n    UserState[\"LoggedOut\"] = \"logged-out\";\n    /** Logged out and all data about the user has been removed. */\n    UserState[\"Removed\"] = \"removed\";\n})(UserState || (UserState = {}));\n/** The type of a user. */\nvar UserType$1;\n(function (UserType) {\n    /** Created by the user itself. */\n    UserType[\"Normal\"] = \"normal\";\n    /** Created by an administrator of the app. */\n    UserType[\"Server\"] = \"server\";\n})(UserType$1 || (UserType$1 = {}));\n/**\n * Representation of an authenticated user of an app.\n */\nclass User {\n    /**\n     * @param parameters Parameters of the user.\n     */\n    constructor(parameters) {\n        this.app = parameters.app;\n        this.id = parameters.id;\n        this.storage = new UserStorage(this.app.storage, this.id);\n        if (\"accessToken\" in parameters && \"refreshToken\" in parameters && \"providerType\" in parameters) {\n            this._accessToken = parameters.accessToken;\n            this._refreshToken = parameters.refreshToken;\n            this.providerType = parameters.providerType;\n            // Save the parameters to storage, for future instances to be hydrated from\n            this.storage.accessToken = parameters.accessToken;\n            this.storage.refreshToken = parameters.refreshToken;\n            this.storage.providerType = parameters.providerType;\n        }\n        else {\n            // Hydrate the rest of the parameters from storage\n            this._accessToken = this.storage.accessToken;\n            this._refreshToken = this.storage.refreshToken;\n            const providerType = this.storage.providerType;\n            this._profile = this.storage.profile;\n            if (providerType) {\n                this.providerType = providerType;\n            }\n            else {\n                throw new Error(\"Storage is missing a provider type\");\n            }\n        }\n        this.fetcher = this.app.fetcher.clone({\n            userContext: { currentUser: this },\n        });\n        this.apiKeys = new ApiKeyAuth(this.fetcher);\n        this.functions = FunctionsFactory.create(this.fetcher);\n    }\n    /**\n     * @returns The access token used to authenticate the user towards MongoDB Realm.\n     */\n    get accessToken() {\n        return this._accessToken;\n    }\n    /**\n     * @param token The new access token.\n     */\n    set accessToken(token) {\n        this._accessToken = token;\n        this.storage.accessToken = token;\n    }\n    /**\n     * @returns The refresh token used to issue new access tokens.\n     */\n    get refreshToken() {\n        return this._refreshToken;\n    }\n    /**\n     * @param token The new refresh token.\n     */\n    set refreshToken(token) {\n        this._refreshToken = token;\n        this.storage.refreshToken = token;\n    }\n    /**\n     * @returns The current state of the user.\n     */\n    get state() {\n        if (this.id in this.app.allUsers) {\n            return this.refreshToken === null ? UserState.LoggedOut : UserState.Active;\n        }\n        else {\n            return UserState.Removed;\n        }\n    }\n    /**\n     * @returns The logged in state of the user.\n     */\n    get isLoggedIn() {\n        return this.state === UserState.Active;\n    }\n    get customData() {\n        if (this.accessToken) {\n            const decodedToken = this.decodeAccessToken();\n            return decodedToken.userData;\n        }\n        else {\n            throw new Error(\"Cannot read custom data without an access token\");\n        }\n    }\n    /**\n     * @returns Profile containing detailed information about the user.\n     */\n    get profile() {\n        if (this._profile) {\n            return this._profile.data;\n        }\n        else {\n            throw new Error(\"A profile was never fetched for this user\");\n        }\n    }\n    get identities() {\n        if (this._profile) {\n            return this._profile.identities;\n        }\n        else {\n            throw new Error(\"A profile was never fetched for this user\");\n        }\n    }\n    get deviceId() {\n        if (this.accessToken) {\n            const payload = this.accessToken.split(\".\")[1];\n            if (payload) {\n                const parsedPayload = JSON.parse(gBase64.decode(payload));\n                const deviceId = parsedPayload[\"baas_device_id\"];\n                if (typeof deviceId === \"string\" && deviceId !== DEFAULT_DEVICE_ID) {\n                    return deviceId;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Refresh the users profile data.\n     */\n    async refreshProfile() {\n        // Fetch the latest profile\n        const response = await this.fetcher.fetchJSON({\n            method: \"GET\",\n            path: routes.api().auth().profile().path,\n        });\n        // Create a profile instance\n        this._profile = new UserProfile(response);\n        // Store this for later hydration\n        this.storage.profile = this._profile;\n    }\n    /**\n     * Log out the user, invalidating the session (and its refresh token).\n     */\n    async logOut() {\n        // Invalidate the refresh token\n        try {\n            if (this._refreshToken !== null) {\n                await this.fetcher.fetchJSON({\n                    method: \"DELETE\",\n                    path: routes.api().auth().session().path,\n                    tokenType: \"refresh\",\n                });\n            }\n        }\n        catch (err) {\n            // Ignore failing to delete a missing refresh token\n            // It might have expired or it might be gone due to the user being deleted\n            if (!(err instanceof Error) || !err.message.includes(\"failed to find refresh token\")) {\n                throw err;\n            }\n        }\n        finally {\n            // Forget the access and refresh token\n            this.accessToken = null;\n            this.refreshToken = null;\n        }\n    }\n    /** @inheritdoc */\n    async linkCredentials(credentials) {\n        const response = await this.app.authenticator.authenticate(credentials, this);\n        // Sanity check the response\n        if (this.id !== response.userId) {\n            const details = `got user id ${response.userId} expected ${this.id}`;\n            throw new Error(`Link response ment for another user (${details})`);\n        }\n        // Update the access token\n        this.accessToken = response.accessToken;\n        // Refresh the profile to include the new identity\n        await this.refreshProfile();\n    }\n    /**\n     * Request a new access token, using the refresh token.\n     */\n    async refreshAccessToken() {\n        const response = await this.fetcher.fetchJSON({\n            method: \"POST\",\n            path: routes.api().auth().session().path,\n            tokenType: \"refresh\",\n        });\n        const { access_token: accessToken } = response;\n        if (typeof accessToken === \"string\") {\n            this.accessToken = accessToken;\n        }\n        else {\n            throw new Error(\"Expected an 'access_token' in the response\");\n        }\n    }\n    /** @inheritdoc */\n    async refreshCustomData() {\n        await this.refreshAccessToken();\n        return this.customData;\n    }\n    /** @inheritdoc */\n    callFunction(name, ...args) {\n        return this.functions.callFunction(name, ...args);\n    }\n    /**\n     * @returns A plain ol' JavaScript object representation of the user.\n     */\n    toJSON() {\n        return {\n            id: this.id,\n            accessToken: this.accessToken,\n            refreshToken: this.refreshToken,\n            profile: this._profile,\n            state: this.state,\n            customData: this.customData,\n        };\n    }\n    /** @inheritdoc */\n    push() {\n        throw new Error(\"Not yet implemented\");\n    }\n    /** @inheritdoc */\n    mongoClient(serviceName) {\n        return createService(this.fetcher, serviceName);\n    }\n    decodeAccessToken() {\n        if (this.accessToken) {\n            // Decode and spread the token\n            const parts = this.accessToken.split(\".\");\n            if (parts.length !== 3) {\n                throw new Error(\"Expected an access token with three parts\");\n            }\n            // Decode the payload\n            const encodedPayload = parts[1];\n            const decodedPayload = gBase64.decode(encodedPayload);\n            const parsedPayload = JSON.parse(decodedPayload);\n            const { exp: expires, iat: issuedAt, sub: subject, user_data: userData = {} } = parsedPayload;\n            // Validate the types\n            if (typeof expires !== \"number\") {\n                throw new Error(\"Failed to decode access token 'exp'\");\n            }\n            else if (typeof issuedAt !== \"number\") {\n                throw new Error(\"Failed to decode access token 'iat'\");\n            }\n            return { expires, issuedAt, subject, userData };\n        }\n        else {\n            throw new Error(\"Missing an access token\");\n        }\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// TODO: Ensure the static interface of the Credentials class implements the static interface of Realm.Credentials\n// See https://stackoverflow.com/a/43484801\n/**\n * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.\n */\nclass Credentials {\n    /**\n     * Constructs an instance of credentials.\n     *\n     * @param providerName The name of the authentication provider used when authenticating.\n     * @param providerType The type of the authentication provider used when authenticating.\n     * @param payload The data being sent to the service when authenticating.\n     */\n    constructor(providerName, providerType, payload) {\n        this.providerName = providerName;\n        this.providerType = providerType;\n        this.payload = payload;\n    }\n    /**\n     * Creates credentials that logs in using the [Anonymous Provider](https://docs.mongodb.com/realm/authentication/anonymous/).\n     *\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static anonymous() {\n        return new Credentials(\"anon-user\", \"anon-user\", {});\n    }\n    /**\n     * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).\n     *\n     * @deprecated Use `Credentials.apiKey`.\n     * @param key The secret content of the API key.\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static userApiKey(key) {\n        return new Credentials(\"api-key\", \"api-key\", { key });\n    }\n    /**\n     * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).\n     *\n     * @deprecated Use `Credentials.apiKey`.\n     * @param key The secret content of the API key.\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static serverApiKey(key) {\n        return new Credentials(\"api-key\", \"api-key\", { key });\n    }\n    /**\n     * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).\n     *\n     * @param key The secret content of the API key.\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static apiKey(key) {\n        return new Credentials(\"api-key\", \"api-key\", { key });\n    }\n    /**\n     * Creates credentials that logs in using the [Email/Password Provider](https://docs.mongodb.com/realm/authentication/email-password/).\n     * Note: This was formerly known as the \"Username/Password\" provider.\n     *\n     * @param email The end-users email address.\n     * @param password The end-users password.\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static emailPassword(email, password) {\n        return new Credentials(\"local-userpass\", \"local-userpass\", {\n            username: email,\n            password,\n        });\n    }\n    /**\n     * Creates credentials that logs in using the [Custom Function Provider](https://docs.mongodb.com/realm/authentication/custom-function/).\n     *\n     * @param payload The custom payload as expected by the server.\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static function(payload) {\n        return new Credentials(\"custom-function\", \"custom-function\", payload);\n    }\n    /**\n     * Creates credentials that logs in using the [Custom JWT Provider](https://docs.mongodb.com/realm/authentication/custom-jwt/).\n     *\n     * @param token The JSON Web Token (JWT).\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static jwt(token) {\n        return new Credentials(\"custom-token\", \"custom-token\", {\n            token,\n        });\n    }\n    /**\n     * Creates credentials that logs in using the [Google Provider](https://docs.mongodb.com/realm/authentication/google/).\n     *\n     * @param payload The URL that users should be redirected to, the auth code or id token from Google.\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static google(payload) {\n        return new Credentials(\"oauth2-google\", \"oauth2-google\", Credentials.derivePayload(payload));\n    }\n    /**\n     * @param payload The payload string.\n     * @returns A payload object based on the string.\n     */\n    static derivePayload(payload) {\n        if (typeof payload === \"string\") {\n            if (payload.includes(\"://\")) {\n                return this.derivePayload({ redirectUrl: payload });\n            }\n            else if (payload.startsWith(\"4/\")) {\n                return this.derivePayload({ authCode: payload });\n            }\n            else if (payload.startsWith(\"ey\")) {\n                return this.derivePayload({ idToken: payload });\n            }\n            else {\n                throw new Error(`Unexpected payload: ${payload}`);\n            }\n        }\n        else if (Object.keys(payload).length === 1) {\n            if (\"authCode\" in payload || \"redirectUrl\" in payload) {\n                return payload;\n            }\n            else if (\"idToken\" in payload) {\n                return { id_token: payload.idToken };\n            }\n            else {\n                throw new Error(\"Unexpected payload: \" + JSON.stringify(payload));\n            }\n        }\n        else {\n            throw new Error(\"Expected only one property in payload, got \" + JSON.stringify(payload));\n        }\n    }\n    /**\n     * Creates credentials that logs in using the [Facebook Provider](https://docs.mongodb.com/realm/authentication/facebook/).\n     *\n     * @param redirectUrlOrAccessToken The URL that users should be redirected to or the auth code returned from Facebook.\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static facebook(redirectUrlOrAccessToken) {\n        return new Credentials(\"oauth2-facebook\", \"oauth2-facebook\", redirectUrlOrAccessToken.includes(\"://\")\n            ? { redirectUrl: redirectUrlOrAccessToken }\n            : { accessToken: redirectUrlOrAccessToken });\n    }\n    /**\n     * Creates credentials that logs in using the [Apple ID Provider](https://docs.mongodb.com/realm/authentication/apple/).\n     *\n     * @param redirectUrlOrIdToken The URL that users should be redirected to or the id_token returned from Apple.\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static apple(redirectUrlOrIdToken) {\n        return new Credentials(\"oauth2-apple\", \"oauth2-apple\", redirectUrlOrIdToken.includes(\"://\") ? { redirectUrl: redirectUrlOrIdToken } : { id_token: redirectUrlOrIdToken });\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\nconst USER_IDS_STORAGE_KEY = \"userIds\";\nconst DEVICE_ID_STORAGE_KEY = \"deviceId\";\n/**\n * Storage specific to the app.\n */\nclass AppStorage extends PrefixedStorage {\n    /**\n     * @param storage The underlying storage to wrap.\n     * @param appId The id of the app.\n     */\n    constructor(storage, appId) {\n        super(storage, `app(${appId})`);\n    }\n    /**\n     * Reads out the list of user ids from storage.\n     *\n     * @returns A list of user ids.\n     */\n    getUserIds() {\n        const userIdsString = this.get(USER_IDS_STORAGE_KEY);\n        const userIds = userIdsString ? JSON.parse(userIdsString) : [];\n        if (Array.isArray(userIds)) {\n            // Remove any duplicates that might have been added\n            // The Set preserves insertion order\n            return [...new Set(userIds)];\n        }\n        else {\n            throw new Error(\"Expected the user ids to be an array\");\n        }\n    }\n    /**\n     * Sets the list of ids in storage.\n     * Optionally merging with existing ids stored in the storage, by prepending these while voiding duplicates.\n     *\n     * @param userIds The list of ids to store.\n     * @param mergeWithExisting Prepend existing ids to avoid data-races with other apps using this storage.\n     */\n    setUserIds(userIds, mergeWithExisting) {\n        if (mergeWithExisting) {\n            // Add any existing user id to the end of this list, avoiding duplicates\n            const existingIds = this.getUserIds();\n            for (const id of existingIds) {\n                if (userIds.indexOf(id) === -1) {\n                    userIds.push(id);\n                }\n            }\n        }\n        // Store the list of ids\n        this.set(USER_IDS_STORAGE_KEY, JSON.stringify(userIds));\n    }\n    /**\n     * Remove an id from the list of ids.\n     *\n     * @param userId The id of a User to be removed.\n     */\n    removeUserId(userId) {\n        const existingIds = this.getUserIds();\n        const userIds = existingIds.filter((id) => id !== userId);\n        // Store the list of ids\n        this.setUserIds(userIds, false);\n    }\n    /**\n     * @returns id of this device (if any exists)\n     */\n    getDeviceId() {\n        return this.get(DEVICE_ID_STORAGE_KEY);\n    }\n    /**\n     * @param deviceId The id of this device, to send on subsequent authentication requests.\n     */\n    setDeviceId(deviceId) {\n        this.set(DEVICE_ID_STORAGE_KEY, deviceId);\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nconst LOWERCASE_LETTERS = \"abcdefghijklmnopqrstuvwxyz\";\nconst CLOSE_CHECK_INTERVAL = 100; // 10 times per second\nconst REDIRECT_HASH_TO_RESULT = {\n    _stitch_client_app_id: \"appId\",\n    _baas_client_app_id: \"appId\",\n    _stitch_ua: \"userAuth\",\n    _baas_ua: \"userAuth\",\n    _stitch_link: \"link\",\n    _baas_link: \"link\",\n    _stitch_error: \"error\",\n    _baas_error: \"error\",\n    _stitch_state: \"state\",\n    _baas_state: \"state\",\n};\n/**\n * A collection of methods helping implement the OAuth2 flow.\n */\nclass OAuth2Helper {\n    /**\n     * @param storage The underlying storage to use when storing and retriving secrets.\n     * @param openWindow An optional function called when a browser window needs to open.\n     */\n    constructor(storage, openWindow = getEnvironment().openWindow) {\n        this.storage = storage.prefix(\"oauth2\");\n        this.openWindow = openWindow;\n    }\n    /**\n     * Parses the query string from the final step of the OAuth flow.\n     *\n     * @param queryString The query string passed through in location.hash.\n     * @returns The result of the OAuth flow.\n     */\n    static parseRedirectLocation(queryString) {\n        const params = decodeQueryString(queryString);\n        const result = {};\n        for (const [p, r] of Object.entries(REDIRECT_HASH_TO_RESULT)) {\n            const value = params[p];\n            if (value) {\n                result[r] = value;\n            }\n        }\n        return result;\n    }\n    /**\n     * Handle the redirect querystring by parsing it and storing it for others to consume.\n     *\n     * @param queryString The query string containing the encoded result from the OAuth provider.\n     * @param storage The underlying storage used to persist the result.\n     */\n    static handleRedirect(queryString, storage = getEnvironment().defaultStorage) {\n        const result = OAuth2Helper.parseRedirectLocation(queryString);\n        const { state, error } = result;\n        if (typeof state === \"string\") {\n            const oauth2Storage = storage.prefix(\"oauth2\");\n            const stateStorage = OAuth2Helper.getStateStorage(oauth2Storage, state);\n            stateStorage.set(\"result\", JSON.stringify(result));\n        }\n        else if (error) {\n            throw new Error(`Failed to handle OAuth 2.0 redirect: ${error}`);\n        }\n        else {\n            throw new Error(\"Failed to handle OAuth 2.0 redirect.\");\n        }\n    }\n    /**\n     * Decodes the authInfo string into its seperate parts.\n     *\n     * @param authInfo An authInfo string returned from the server.\n     * @returns An object containing the separate parts of the authInfo string.\n     */\n    static decodeAuthInfo(authInfo) {\n        const parts = (authInfo || \"\").split(\"$\");\n        if (parts.length === 4) {\n            const [accessToken, refreshToken, userId, deviceId] = parts;\n            return { accessToken, refreshToken, userId, deviceId };\n        }\n        else {\n            throw new Error(\"Failed to decode 'authInfo' into ids and tokens\");\n        }\n    }\n    /**\n     * Get the storage key associated of an secret associated with a state.\n     *\n     * @param storage The root storage used to derive a \"state namespaced\" storage.\n     * @param state The random state.\n     * @returns The storage associated with a particular state.\n     */\n    static getStateStorage(storage, state) {\n        return storage.prefix(`state(${state})`);\n    }\n    /**\n     * Open a window and wait for the redirect to be handled.\n     *\n     * @param url The URL to open.\n     * @param state The state which will be used to listen for storage updates.\n     * @returns The result passed through the redirect.\n     */\n    openWindowAndWaitForRedirect(url, state) {\n        const stateStorage = OAuth2Helper.getStateStorage(this.storage, state);\n        // Return a promise that resolves when the  gets known\n        return new Promise((resolve, reject) => {\n            let redirectWindow = null;\n            // We're declaring the interval now to enable referencing before its initialized\n            let windowClosedInterval; // eslint-disable-line prefer-const\n            const handleStorageUpdate = () => {\n                // Trying to get the secret from storage\n                const result = stateStorage.get(\"result\");\n                if (result) {\n                    const parsedResult = JSON.parse(result);\n                    // The secret got updated!\n                    stateStorage.removeListener(handleStorageUpdate);\n                    // Clear the storage to prevent others from reading this\n                    stateStorage.clear();\n                    // Try closing the newly created window\n                    try {\n                        if (redirectWindow) {\n                            // Stop checking if the window closed\n                            clearInterval(windowClosedInterval);\n                            redirectWindow.close();\n                        }\n                    }\n                    catch (err) {\n                        console.warn(`Failed closing redirect window: ${err}`);\n                    }\n                    finally {\n                        resolve(parsedResult);\n                    }\n                }\n            };\n            // Add a listener to the state storage, awaiting an update to the secret\n            stateStorage.addListener(handleStorageUpdate);\n            // Open up a window\n            redirectWindow = this.openWindow(url);\n            // Not using a const, because we need the two listeners to reference each other when removing the other.\n            windowClosedInterval = setInterval(() => {\n                // Polling \"closed\" because registering listeners on the window violates cross-origin policies\n                if (!redirectWindow) {\n                    // No need to keep polling for a window that we can't check\n                    clearInterval(windowClosedInterval);\n                }\n                else if (redirectWindow.closed) {\n                    // Stop polling the window state\n                    clearInterval(windowClosedInterval);\n                    // Stop listening for changes to the storage\n                    stateStorage.removeListener(handleStorageUpdate);\n                    // Reject the promise\n                    const err = new Error(\"Window closed\");\n                    reject(err);\n                }\n            }, CLOSE_CHECK_INTERVAL);\n        });\n    }\n    /**\n     * Generate a random state string.\n     *\n     * @returns The random state string.\n     */\n    generateState() {\n        return generateRandomString(12, LOWERCASE_LETTERS);\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\nconst REDIRECT_LOCATION_HEADER = \"x-baas-location\";\n/**\n * Handles authentication and linking of users.\n */\nclass Authenticator {\n    /**\n     * @param fetcher The fetcher used to fetch responses from the server.\n     * @param storage The storage used when completing OAuth 2.0 flows (should not be scoped to a specific app).\n     * @param getDeviceInformation Called to get device information to be sent to the server.\n     */\n    constructor(fetcher, storage, getDeviceInformation) {\n        this.fetcher = fetcher;\n        this.oauth2 = new OAuth2Helper(storage);\n        this.getDeviceInformation = getDeviceInformation;\n    }\n    /**\n     * @param credentials Credentials to use when logging in.\n     * @param linkingUser A user requesting to link.\n     * @returns A promise resolving to the response from the server.\n     */\n    async authenticate(credentials, linkingUser) {\n        const deviceInformation = this.getDeviceInformation();\n        const isLinking = typeof linkingUser === \"object\";\n        if (credentials.providerType.startsWith(\"oauth2\") && typeof credentials.payload.redirectUrl === \"string\") {\n            // Initiate the OAuth2 flow by generating a state and fetch a redirect URL\n            const state = this.oauth2.generateState();\n            const url = await this.getLogInUrl(credentials, isLinking, {\n                state,\n                redirect: credentials.payload.redirectUrl,\n                // Ensure redirects are communicated in a header different from \"Location\" and status remains 200 OK\n                providerRedirectHeader: isLinking ? true : undefined,\n                // Add the device information, only if we're not linking - since that request won't have a body of its own.\n                device: !isLinking ? deviceInformation.encode() : undefined,\n            });\n            // If we're linking, we need to send the users access token in the request\n            if (isLinking) {\n                const response = await this.fetcher.fetch({\n                    method: \"GET\",\n                    url,\n                    tokenType: isLinking ? \"access\" : \"none\",\n                    user: linkingUser,\n                    // The response will set a cookie that we need to tell the browser to store\n                    mode: \"cors\",\n                    credentials: \"include\",\n                });\n                // If a response header contains a redirect URL: Open a window and wait for the redirect to be handled\n                const redirectUrl = response.headers.get(REDIRECT_LOCATION_HEADER);\n                if (redirectUrl) {\n                    return this.openWindowAndWaitForAuthResponse(redirectUrl, state);\n                }\n                else {\n                    throw new Error(`Missing ${REDIRECT_LOCATION_HEADER} header`);\n                }\n            }\n            else {\n                // Otherwise we can open a window and let the server redirect the user right away\n                // This gives lower latency (as we don't need the client to receive and execute the redirect in code)\n                // This also has less dependency on cookies and doesn't sent any tokens.\n                return this.openWindowAndWaitForAuthResponse(url, state);\n            }\n        }\n        else {\n            const logInUrl = await this.getLogInUrl(credentials, isLinking);\n            const response = await this.fetcher.fetchJSON({\n                method: \"POST\",\n                url: logInUrl,\n                body: {\n                    ...credentials.payload,\n                    options: {\n                        device: deviceInformation.toJSON(),\n                    },\n                },\n                tokenType: isLinking ? \"access\" : \"none\",\n                user: linkingUser,\n            });\n            // Spread out values from the response and ensure they're valid\n            const { user_id: userId, access_token: accessToken, refresh_token: refreshToken = null, device_id: deviceId, } = response;\n            if (typeof userId !== \"string\") {\n                throw new Error(\"Expected a user id in the response\");\n            }\n            if (typeof accessToken !== \"string\") {\n                throw new Error(\"Expected an access token in the response\");\n            }\n            if (typeof refreshToken !== \"string\" && refreshToken !== null) {\n                throw new Error(\"Expected refresh token to be a string or null\");\n            }\n            if (typeof deviceId !== \"string\") {\n                throw new Error(\"Expected device id to be a string\");\n            }\n            return { userId, accessToken, refreshToken, deviceId };\n        }\n    }\n    /**\n     * @param credentials Credentials to use when logging in.\n     * @param link Should the request link with the current user?\n     * @param extraQueryParams Any extra parameters to include in the query string\n     * @returns A promise resolving to the url to be used when logging in.\n     */\n    async getLogInUrl(credentials, link = false, extraQueryParams = {}) {\n        // See https://github.com/mongodb/stitch-js-sdk/blob/310f0bd5af80f818cdfbc3caf1ae29ffa8e9c7cf/packages/core/sdk/src/auth/internal/CoreStitchAuth.ts#L746-L780\n        const appRoute = this.fetcher.appRoute;\n        const loginRoute = appRoute.authProvider(credentials.providerName).login();\n        const qs = encodeQueryString({\n            link: link ? \"true\" : undefined,\n            ...extraQueryParams,\n        });\n        const locationUrl = await this.fetcher.locationUrl;\n        return locationUrl + loginRoute.path + qs;\n    }\n    async openWindowAndWaitForAuthResponse(redirectUrl, state) {\n        const redirectResult = await this.oauth2.openWindowAndWaitForRedirect(redirectUrl, state);\n        // Decode the auth info (id, tokens, etc.) from the result of the redirect\n        return OAuth2Helper.decodeAuthInfo(redirectResult.userAuth);\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// TODO: Determine if the shape of an error response is specific to each service or widely used.\n/**\n * An error produced while communicating with the MongoDB Realm server.\n */\nclass MongoDBRealmError extends Error {\n    constructor(method, url, statusCode, statusText, error, errorCode, link) {\n        const summary = statusText ? `status ${statusCode} ${statusText}` : `status ${statusCode}`;\n        if (typeof error === \"string\") {\n            super(`Request failed (${method} ${url}): ${error} (${summary})`);\n        }\n        else {\n            super(`Request failed (${method} ${url}): (${summary})`);\n        }\n        this.method = method;\n        this.url = url;\n        this.statusText = statusText;\n        this.statusCode = statusCode;\n        this.error = error;\n        this.errorCode = errorCode;\n        this.link = link;\n    }\n    /**\n     * Constructs and returns an error from a request and a response.\n     * Note: The caller must throw this error themselves.\n     *\n     * @param request The request sent to the server.\n     * @param response A raw response, as returned from the server.\n     * @returns An error from a request and a response.\n     */\n    static async fromRequestAndResponse(request, response) {\n        var _a;\n        const { url, method } = request;\n        const { status, statusText } = response;\n        if ((_a = response.headers.get(\"content-type\")) === null || _a === void 0 ? void 0 : _a.startsWith(\"application/json\")) {\n            const body = await response.json();\n            if (typeof body === \"object\" && body) {\n                const { error, error_code: errorCode, link } = body;\n                return new MongoDBRealmError(method, url, status, statusText, typeof error === \"string\" ? error : undefined, typeof errorCode === \"string\" ? errorCode : undefined, typeof link === \"string\" ? link : undefined);\n            }\n        }\n        return new MongoDBRealmError(method, url, status, statusText);\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * @param body A possible resonse body.\n * @returns An async iterator.\n */\nfunction asyncIteratorFromResponseBody(body) {\n    if (typeof body !== \"object\" || body === null) {\n        throw new Error(\"Expected a non-null object\");\n    }\n    else if (Symbol.asyncIterator in body) {\n        return body;\n    }\n    else if (\"getReader\" in body) {\n        const stream = body;\n        return {\n            [Symbol.asyncIterator]() {\n                const reader = stream.getReader();\n                return {\n                    next() {\n                        return reader.read();\n                    },\n                    async return() {\n                        await reader.cancel();\n                        return { done: true, value: null };\n                    },\n                };\n            },\n        };\n    }\n    else {\n        throw new Error(\"Expected an AsyncIterable or a ReadableStream\");\n    }\n}\n/**\n * Wraps a NetworkTransport from the \"realm-network-transport\" package.\n * Extracts error messages and throws `MongoDBRealmError` objects upon failures.\n * Injects access or refresh tokens for a current or specific user.\n * Refreshes access tokens if requests fails due to a 401 error.\n * Optionally parses response as JSON before returning it.\n * Fetches and exposes an app's location url.\n */\nclass Fetcher {\n    /**\n     * @param config A configuration of the fetcher.\n     * @param config.appId The application id.\n     * @param config.transport The transport used when fetching.\n     * @param config.userContext An object used to determine the requesting user.\n     * @param config.locationUrlContext An object used to determine the location / base URL.\n     */\n    constructor({ appId, transport, userContext, locationUrlContext }) {\n        this.appId = appId;\n        this.transport = transport;\n        this.userContext = userContext;\n        this.locationUrlContext = locationUrlContext;\n    }\n    /**\n     * @param user An optional user to generate the header for.\n     * @param tokenType The type of token (access or refresh).\n     * @returns An object containing the user's token as \"Authorization\" header or undefined if no user is given.\n     */\n    static buildAuthorizationHeader(user, tokenType) {\n        if (!user || tokenType === \"none\") {\n            return {};\n        }\n        else if (tokenType === \"access\") {\n            return { Authorization: `Bearer ${user.accessToken}` };\n        }\n        else if (tokenType === \"refresh\") {\n            return { Authorization: `Bearer ${user.refreshToken}` };\n        }\n        else {\n            throw new Error(`Unexpected token type (${tokenType})`);\n        }\n    }\n    /**\n     * @param body The body string or object passed from a request.\n     * @returns An object optionally specifying the \"Content-Type\" header.\n     */\n    static buildBody(body) {\n        if (!body) {\n            return;\n        }\n        else if (typeof body === \"object\" && body !== null) {\n            return JSON.stringify(serialize(body));\n        }\n        else if (typeof body === \"string\") {\n            return body;\n        }\n        else {\n            console.log(\"body is\", body);\n            throw new Error(\"Unexpected type of body\");\n        }\n    }\n    /**\n     * @param body The body string or object passed from a request.\n     * @returns An object optionally specifying the \"Content-Type\" header.\n     */\n    static buildJsonHeader(body) {\n        if (body && body.length > 0) {\n            return { \"Content-Type\": \"application/json\" };\n        }\n        else {\n            return {};\n        }\n    }\n    clone(config) {\n        return new Fetcher({\n            appId: this.appId,\n            transport: this.transport,\n            userContext: this.userContext,\n            locationUrlContext: this.locationUrlContext,\n            ...config,\n        });\n    }\n    /**\n     * Fetch a network resource as an authenticated user.\n     *\n     * @param request The request which should be sent to the server.\n     * @returns The response from the server.\n     */\n    async fetch(request) {\n        const { path, url, tokenType = \"access\", user = this.userContext.currentUser, ...restOfRequest } = request;\n        if (typeof path === \"string\" && typeof url === \"string\") {\n            throw new Error(\"Use of 'url' and 'path' mutually exclusive\");\n        }\n        else if (typeof path === \"string\") {\n            // Derive the URL\n            const url = (await this.locationUrlContext.locationUrl) + path;\n            return this.fetch({ ...request, path: undefined, url });\n        }\n        else if (typeof url === \"string\") {\n            const response = await this.transport.fetch({\n                ...restOfRequest,\n                url,\n                headers: {\n                    ...Fetcher.buildAuthorizationHeader(user, tokenType),\n                    ...request.headers,\n                },\n            });\n            if (response.ok) {\n                return response;\n            }\n            else if (user && response.status === 401 && tokenType === \"access\") {\n                // If the access token has expired, it would help refreshing it\n                await user.refreshAccessToken();\n                // Retry with the specific user, since the currentUser might have changed.\n                return this.fetch({ ...request, user });\n            }\n            else {\n                if (user && response.status === 401 && tokenType === \"refresh\") {\n                    // A 401 error while using the refresh token indicates the token has an issue.\n                    // Reset the tokens to prevent a lock.\n                    user.accessToken = null;\n                    user.refreshToken = null;\n                }\n                // Throw an error with a message extracted from the body\n                throw await MongoDBRealmError.fromRequestAndResponse(request, response);\n            }\n        }\n        else {\n            throw new Error(\"Expected either 'url' or 'path'\");\n        }\n    }\n    /**\n     * Fetch a network resource as an authenticated user and parse the result as extended JSON.\n     *\n     * @param request The request which should be sent to the server.\n     * @returns The response from the server, parsed as extended JSON.\n     */\n    async fetchJSON(request) {\n        const { body } = request;\n        const serializedBody = Fetcher.buildBody(body);\n        const contentTypeHeaders = Fetcher.buildJsonHeader(serializedBody);\n        const response = await this.fetch({\n            ...request,\n            body: serializedBody,\n            headers: {\n                Accept: \"application/json\",\n                ...contentTypeHeaders,\n                ...request.headers,\n            },\n        });\n        const contentType = response.headers.get(\"content-type\");\n        if (contentType === null || contentType === void 0 ? void 0 : contentType.startsWith(\"application/json\")) {\n            const responseBody = await response.json();\n            return deserialize(responseBody);\n        }\n        else if (contentType === null) {\n            return null;\n        }\n        else {\n            throw new Error(`Expected JSON response, got \"${contentType}\"`);\n        }\n    }\n    /**\n     * Fetch an \"event-stream\" resource as an authenticated user.\n     *\n     * @param request The request which should be sent to the server.\n     * @returns An async iterator over the response body.\n     */\n    async fetchStream(request) {\n        const { body } = await this.fetch({\n            ...request,\n            headers: {\n                Accept: \"text/event-stream\",\n                ...request.headers,\n            },\n        });\n        return asyncIteratorFromResponseBody(body);\n    }\n    /**\n     * @returns The path of the app route.\n     */\n    get appRoute() {\n        return routes.api().app(this.appId);\n    }\n    /**\n     * @returns A promise of the location URL of the app.\n     */\n    get locationUrl() {\n        return this.locationUrlContext.locationUrl;\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * The key in a storage on which the device id is stored.\n */\nconst DEVICE_ID_STORAGE_KEY$1 = \"deviceId\";\nvar DeviceFields;\n(function (DeviceFields) {\n    DeviceFields[\"DEVICE_ID\"] = \"deviceId\";\n    DeviceFields[\"APP_ID\"] = \"appId\";\n    DeviceFields[\"APP_VERSION\"] = \"appVersion\";\n    DeviceFields[\"PLATFORM\"] = \"platform\";\n    DeviceFields[\"PLATFORM_VERSION\"] = \"platformVersion\";\n    DeviceFields[\"SDK_VERSION\"] = \"sdkVersion\";\n})(DeviceFields || (DeviceFields = {}));\n/**\n * Information describing the device, app and SDK.\n */\nclass DeviceInformation {\n    /**\n     * @param params Construct the device information from these parameters.\n     * @param params.appId A user-defined application id.\n     * @param params.appVersion A user-defined application version.\n     * @param params.deviceId An unique id for the end-users device.\n     */\n    constructor({ appId, appVersion, deviceId }) {\n        /**\n         * The version of the Realm Web SDK (constant provided by Rollup).\n         */\n        this.sdkVersion = \"1.7.0\";\n        const environment = getEnvironment();\n        this.platform = environment.platform;\n        this.platformVersion = environment.platformVersion;\n        this.appId = appId;\n        this.appVersion = appVersion;\n        this.deviceId = deviceId;\n    }\n    /**\n     * @returns An base64 URI encoded representation of the device information.\n     */\n    encode() {\n        const obj = removeKeysWithUndefinedValues(this);\n        return gBase64.encode(JSON.stringify(obj));\n    }\n    /**\n     * @returns The defaults\n     */\n    toJSON() {\n        return removeKeysWithUndefinedValues(this);\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * Default base url to prefix all requests if no baseUrl is specified in the configuration.\n */\nconst DEFAULT_BASE_URL = \"https://realm.mongodb.com\";\n/**\n * MongoDB Realm App\n */\nclass App {\n    /**\n     * Construct a Realm App, either from the Realm App id visible from the MongoDB Realm UI or a configuration.\n     *\n     * @param idOrConfiguration The Realm App id or a configuration to use for this app.\n     */\n    constructor(idOrConfiguration) {\n        /**\n         * An array of active and logged-out users.\n         * Elements in the beginning of the array is considered more recent than the later elements.\n         */\n        this.users = [];\n        /**\n         * A promise resolving to the App's location url.\n         */\n        this._locationUrl = null;\n        // If the argument is a string, convert it to a simple configuration object.\n        const configuration = typeof idOrConfiguration === \"string\" ? { id: idOrConfiguration } : idOrConfiguration;\n        // Initialize properties from the configuration\n        if (typeof configuration === \"object\" && typeof configuration.id === \"string\") {\n            this.id = configuration.id;\n        }\n        else {\n            throw new Error(\"Missing a MongoDB Realm app-id\");\n        }\n        this.baseUrl = configuration.baseUrl || DEFAULT_BASE_URL;\n        if (configuration.skipLocationRequest) {\n            // Use the base url directly, instead of requesting a location URL from the server\n            this._locationUrl = Promise.resolve(this.baseUrl);\n        }\n        this.localApp = configuration.app;\n        const { storage, transport = new DefaultNetworkTransport() } = configuration;\n        // Construct a fetcher wrapping the network transport\n        this.fetcher = new Fetcher({\n            appId: this.id,\n            userContext: this,\n            locationUrlContext: this,\n            transport,\n        });\n        // Construct the auth providers\n        this.emailPasswordAuth = new EmailPasswordAuth(this.fetcher);\n        // Construct the storage\n        const baseStorage = storage || getEnvironment().defaultStorage;\n        this.storage = new AppStorage(baseStorage, this.id);\n        this.authenticator = new Authenticator(this.fetcher, baseStorage, () => this.deviceInformation);\n        // Hydrate the app state from storage\n        try {\n            this.hydrate();\n        }\n        catch (err) {\n            // The storage was corrupted\n            this.storage.clear();\n            // A failed hydration shouldn't throw and break the app experience\n            // Since this is \"just\" persisted state that unfortunately got corrupted or partially lost\n            console.warn(\"Realm app hydration failed:\", err instanceof Error ? err.message : err);\n        }\n    }\n    /**\n     * Get or create a singleton Realm App from an id.\n     * Calling this function multiple times with the same id will return the same instance.\n     *\n     * @param id The Realm App id visible from the MongoDB Realm UI or a configuration.\n     * @returns The Realm App instance.\n     */\n    static getApp(id) {\n        if (id in App.appCache) {\n            return App.appCache[id];\n        }\n        else {\n            const instance = new App(id);\n            App.appCache[id] = instance;\n            return instance;\n        }\n    }\n    /**\n     * Switch user.\n     *\n     * @param nextUser The user or id of the user to switch to.\n     */\n    switchUser(nextUser) {\n        const index = this.users.findIndex((u) => u === nextUser);\n        if (index === -1) {\n            throw new Error(\"The user was never logged into this app\");\n        }\n        // Remove the user from the stack\n        const [user] = this.users.splice(index, 1);\n        // Insert the user in the beginning of the stack\n        this.users.unshift(user);\n    }\n    /**\n     * Log in a user.\n     *\n     * @param credentials Credentials to use when logging in.\n     * @param fetchProfile Should the users profile be fetched? (default: true)\n     * @returns A promise resolving to the newly logged in user.\n     */\n    async logIn(credentials, fetchProfile = true) {\n        const response = await this.authenticator.authenticate(credentials);\n        const user = this.createOrUpdateUser(response, credentials.providerType);\n        // Let's ensure this will be the current user, in case the user object was reused.\n        this.switchUser(user);\n        // If needed, fetch and set the profile on the user\n        if (fetchProfile) {\n            await user.refreshProfile();\n        }\n        // Persist the user id in the storage,\n        // merging to avoid overriding logins from other apps using the same underlying storage\n        this.storage.setUserIds(this.users.map((u) => u.id), true);\n        // Read out and store the device id from the server\n        const deviceId = response.deviceId;\n        if (deviceId && deviceId !== \"000000000000000000000000\") {\n            this.storage.set(DEVICE_ID_STORAGE_KEY$1, deviceId);\n        }\n        // Return the user\n        return user;\n    }\n    /**\n     * @inheritdoc\n     */\n    async removeUser(user) {\n        // Remove the user from the list of users\n        const index = this.users.findIndex((u) => u === user);\n        if (index === -1) {\n            throw new Error(\"The user was never logged into this app\");\n        }\n        this.users.splice(index, 1);\n        // Log out the user - this removes access and refresh tokens from storage\n        await user.logOut();\n        // Remove the users profile from storage\n        this.storage.remove(`user(${user.id}):profile`);\n        // Remove the user from the storage\n        this.storage.removeUserId(user.id);\n    }\n    /**\n     * @inheritdoc\n     */\n    async deleteUser(user) {\n        await this.fetcher.fetchJSON({\n            method: \"DELETE\",\n            path: routes.api().auth().delete().path,\n        });\n        await this.removeUser(user);\n    }\n    /**\n     * The currently active user (or null if no active users exists).\n     *\n     * @returns the currently active user or null.\n     */\n    get currentUser() {\n        const activeUsers = this.users.filter((user) => user.state === UserState.Active);\n        if (activeUsers.length === 0) {\n            return null;\n        }\n        else {\n            // Current user is the top of the stack\n            return activeUsers[0];\n        }\n    }\n    /**\n     * All active and logged-out users:\n     *  - First in the list are active users (ordered by most recent call to switchUser or login)\n     *  - Followed by logged out users (also ordered by most recent call to switchUser or login).\n     *\n     * @returns An array of users active or logged out users (current user being the first).\n     */\n    get allUsers() {\n        // Returning a freezed copy of the list of users to prevent outside changes\n        return Object.fromEntries(this.users.map((user) => [user.id, user]));\n    }\n    /**\n     * @returns A promise of the app URL, with the app location resolved.\n     */\n    get locationUrl() {\n        if (!this._locationUrl) {\n            const path = routes.api().app(this.id).location().path;\n            this._locationUrl = this.fetcher\n                .fetchJSON({\n                method: \"GET\",\n                url: this.baseUrl + path,\n                tokenType: \"none\",\n            })\n                .then((body) => {\n                if (typeof body !== \"object\") {\n                    throw new Error(\"Expected response body be an object\");\n                }\n                else {\n                    return body;\n                }\n            })\n                .then(({ hostname }) => {\n                if (typeof hostname !== \"string\") {\n                    throw new Error(\"Expected response to contain a 'hostname'\");\n                }\n                else {\n                    return hostname;\n                }\n            })\n                .catch((err) => {\n                // Reset the location to allow another request to fetch again.\n                this._locationUrl = null;\n                throw err;\n            });\n        }\n        return this._locationUrl;\n    }\n    /**\n     * @returns Information about the current device, sent to the server when authenticating.\n     */\n    get deviceInformation() {\n        const deviceIdStr = this.storage.getDeviceId();\n        const deviceId = typeof deviceIdStr === \"string\" && deviceIdStr !== \"000000000000000000000000\"\n            ? new ObjectId(deviceIdStr)\n            : undefined;\n        return new DeviceInformation({\n            appId: this.localApp ? this.localApp.name : undefined,\n            appVersion: this.localApp ? this.localApp.version : undefined,\n            deviceId,\n        });\n    }\n    /**\n     * Create (and store) a new user or update an existing user's access and refresh tokens.\n     * This helps de-duplicating users in the list of users known to the app.\n     *\n     * @param response A response from the Authenticator.\n     * @param providerType The type of the authentication provider used.\n     * @returns A new or an existing user.\n     */\n    createOrUpdateUser(response, providerType) {\n        const existingUser = this.users.find((u) => u.id === response.userId);\n        if (existingUser) {\n            // Update the users access and refresh tokens\n            existingUser.accessToken = response.accessToken;\n            existingUser.refreshToken = response.refreshToken;\n            return existingUser;\n        }\n        else {\n            // Create and store a new user\n            if (!response.refreshToken) {\n                throw new Error(\"No refresh token in response from server\");\n            }\n            const user = new User({\n                app: this,\n                id: response.userId,\n                accessToken: response.accessToken,\n                refreshToken: response.refreshToken,\n                providerType,\n            });\n            this.users.unshift(user);\n            return user;\n        }\n    }\n    /**\n     * Restores the state of the app (active and logged-out users) from the storage\n     */\n    hydrate() {\n        const userIds = this.storage.getUserIds();\n        this.users = userIds.map((id) => new User({ app: this, id }));\n    }\n}\n/**\n * A map of app instances returned from calling getApp.\n */\nApp.appCache = {};\n/**\n * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.\n */\nApp.Credentials = Credentials;\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * Get or create a singleton Realm App from an id.\n * Calling this function multiple times with the same id will return the same instance.\n *\n * @param id The Realm App id visible from the MongoDB Realm UI or a configuration.\n * @returns The Realm App instance.\n */\nfunction getApp(id) {\n    return App.getApp(id);\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * In-memory storage that will not be persisted.\n */\nclass LocalStorage {\n    /**\n     * Constructs a LocalStorage using the global window.\n     */\n    constructor() {\n        if (typeof globalThis.localStorage === \"object\") {\n            this.global = globalThis;\n        }\n        else {\n            throw new Error(\"Cannot use LocalStorage without a global localStorage object\");\n        }\n    }\n    /** @inheritdoc */\n    get(key) {\n        return this.global.localStorage.getItem(key);\n    }\n    /** @inheritdoc */\n    set(key, value) {\n        return this.global.localStorage.setItem(key, value);\n    }\n    /** @inheritdoc */\n    remove(key) {\n        return this.global.localStorage.removeItem(key);\n    }\n    /** @inheritdoc */\n    prefix(keyPart) {\n        return new PrefixedStorage(this, keyPart);\n    }\n    /** @inheritdoc */\n    clear(prefix) {\n        const keys = [];\n        // Iterate all keys to find the once have a matching prefix.\n        for (let i = 0; i < this.global.localStorage.length; i++) {\n            const key = this.global.localStorage.key(i);\n            if (key && (!prefix || key.startsWith(prefix))) {\n                keys.push(key);\n            }\n        }\n        // Remove the items in a seperate loop to avoid updating while iterating.\n        for (const key of keys) {\n            this.global.localStorage.removeItem(key);\n        }\n    }\n    /** @inheritdoc */\n    addListener(listener) {\n        return this.global.addEventListener(\"storage\", listener);\n    }\n    /** @inheritdoc */\n    removeListener(listener) {\n        return this.global.removeEventListener(\"storage\", listener);\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\nconst browser = detect();\nconst DefaultStorage = \"localStorage\" in globalThis ? LocalStorage : MemoryStorage;\n/**\n * Attempt to use the browser to open a window\n *\n * @param url The url to open a window to.\n * @returns Then newly create window.\n */\nfunction openWindow(url) {\n    if (typeof globalThis.open === \"function\") {\n        return globalThis.open(url);\n    }\n    else {\n        console.log(`Please open ${url}`);\n        return null;\n    }\n}\nconst environment$1 = {\n    defaultStorage: new DefaultStorage().prefix(\"realm-web\"),\n    openWindow,\n    platform: (browser === null || browser === void 0 ? void 0 : browser.name) || \"web\",\n    platformVersion: (browser === null || browser === void 0 ? void 0 : browser.version) || \"0.0.0\",\n    TextDecoder,\n};\nsetEnvironment(environment$1);\n/**\n * Handle an OAuth 2.0 redirect.\n *\n * @param location An optional location to use (defaults to the windows current location).\n * @param storage Optional storage used to save any results from the location.\n */\nfunction handleAuthRedirect(location = globalThis.location, storage = environment$1.defaultStorage) {\n    try {\n        const queryString = location.hash.substr(1); // Strip the initial # from the hash\n        OAuth2Helper.handleRedirect(queryString, storage);\n    }\n    catch (err) {\n        // Ensure calling this never throws: It should not interrupt a users flow.\n        console.warn(err);\n    }\n}\n\nexport { App, Credentials, DEFAULT_BASE_URL, LocalStorage, MongoDBRealmError, User, UserState, UserType$1 as UserType, getApp, getEnvironment, handleAuthRedirect, setEnvironment };\n"],
  "mappings": "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",
  "names": []
}
